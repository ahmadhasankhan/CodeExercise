require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RoversController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Rover. As you add validations to Rover, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryGirl.attributes_for(:rover) }
  let(:valid_update_attributes) { FactoryGirl.attributes_for(:rover, commands: "LMLMLMLMM") }

  let(:invalid_attributes) { FactoryGirl.attributes_for(:rover, position_x: 1, position_y: 2, direction: "K") }


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RoversController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all rovers as @rover" do
      rover = Rover.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:rovers)).to eq([rover])
    end
  end

  describe "GET #show" do
    it "assigns the requested rover as @tover" do
      rover = Rover.create! valid_attributes
      get :show, {:id => rover.to_param}, valid_session
      expect(assigns(:rover)).to eq(rover)
    end
  end

  describe "GET #new" do
    it "assigns a new rover as @rover" do
      get :new, {}, valid_session
      expect(assigns(:rover)).to be_a_new(Rover)
    end
  end

  describe "GET #edit" do
    it "assigns the requested tover as @tover" do
      rover = Rover.create! valid_attributes
      get :edit, {:id => rover.to_param}, valid_session
      expect(assigns(:rover)).to eq(rover)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Rover" do
        expect {
          post :create, {:rover => valid_attributes}, valid_session
        }.to change(Rover, :count).by(1)
      end

      it "assigns a newly created rover as @rover" do
        post :create, {:rover => valid_attributes}, valid_session
        expect(assigns(:rover)).to be_a(Rover)
        expect(assigns(:rover)).to be_persisted
      end

      it "redirects to the created rover" do
        post :create, {:rover => valid_attributes}, valid_session
        expect(response).to redirect_to(Rover.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved rover as @tover" do
        post :create, {:rover => invalid_attributes}, valid_session
        expect(assigns(:rover)).to be_a_new(Rover)
      end

      it "re-renders the 'new' template" do
        post :create, {:rover => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) { FactoryGirl.attributes_for(:rover, position_x: 1, position_y: 2, direction: "K") }

      it "updates the requested rover" do
        rover = Rover.create! valid_attributes
        rover_name = rover.name
        put :update, {:id => rover.to_param, :commands => "LMLMLMLMM"}, valid_session
        rover.reload
        expect(rover.name == rover_name && rover.position_x == 1 && rover.position_y == 3 && rover.direction == "N")
      end

      it "assigns the requested tover as @tover" do
        rover = Rover.create! valid_attributes
        put :update, {:id => rover.to_param, :rover => valid_update_attributes}, valid_session
        expect(assigns(:rover)).to eq(rover)
      end

      it "redirects to the rover" do
        rover = Rover.create! valid_attributes
        put :update, {:id => rover.to_param, :rover => valid_attributes}, valid_session

        expect(response == 200)

      end
    end

    context "with invalid params" do
      it "assigns the rover as @rover" do
        rover = Rover.create! valid_attributes
        put :update, {:id => rover.to_param, :rover => invalid_attributes}, valid_session
        expect(assigns(:rover)).to eq(rover)
      end

      it "re-renders the 'edit' template" do
        rover = Rover.create! valid_attributes
        put :update, {:id => rover.to_param, :rover => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested rover" do
      rover = Rover.create! valid_attributes
      expect {
        delete :destroy, {:id => rover.to_param}, valid_session
      }.to change(Rover, :count).by(-1)
    end

    it "redirects to the rovers list" do
      rover = Rover.create! valid_attributes
      delete :destroy, {:id => rover.to_param}, valid_session
      expect(response).to redirect_to(rovers_url)
    end
  end

end
